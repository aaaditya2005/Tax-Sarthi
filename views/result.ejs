<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tax Comparison Results</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.7.2/css/all.min.css" integrity="sha512-Evv84Mr4kqVGRNSgIGL/F/aIDqQb7xQ2vcrdIwxfjThSH8CSR7PBEakCr51Ck+w+/U6swU2Im1vVX0SVk9ABhg==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="/result.css">
</head>
<body class="bg-gray-100 font-sans">
    <div class="min-h-screen flex items-center justify-center">
        <div class="bg-white shadow-lg rounded-lg w-full max-w-3xl p-6">
            <h1 class="text-2xl font-bold text-gray-800 mb-4">Hello, <span class="text-blue-600"><%= user.name %></span></h1>
            <h2 class="text-xl font-semibold text-gray-700 mb-6">Here is your tax saving comparison:</h2>

            <div class="grid grid-cols-1 sm:grid-cols-2 gap-6">
                <div class="bg-gray-50 p-4 rounded-md shadow-md">
                    <h3 class="text-lg font-bold text-gray-600">Old Tax Regime</h3>
                    <%
        const salary = parseFloat(formData.salary || 0);
        const businessIncome = parseFloat(formData.business_income || 0);
        const rentalIncome = parseFloat(formData.rental_income || 0);
        const otherIncome = parseFloat(formData.other_income || 0);
        const savingInterest = parseFloat(formData.saving_interest || 0);
        const capitalGains = parseFloat(formData.capital_gains || 0);
        const hra = parseFloat(formData.hra || 0);
        const hraDeduction = (hra > 0.5 * salary) ? (0.5 * salary) : hra;

        const eightyC = parseFloat(formData.lip || 0) +
            parseFloat(formData.epf || 0) +
            parseFloat(formData.ppf || 0) +
            parseFloat(formData.nsc || 0) +
            parseFloat(formData.ssy || 0) +
            parseFloat(formData.fd || 0) +
            parseFloat(formData.elss || 0) +
            parseFloat(formData.NPS || 0);
        const eightyCDeductions = (eightyC > 150000) ? 150000 : eightyC;

        const cea = parseFloat(formData.cea || 0);
        const ceaDeductions = (cea > 9600) ? 9600 : cea;

        const ta = parseFloat(formData.ta || 0);
        const taDeductions = (ta > 19200) ? 19200 : ta;

        const tad = parseFloat(formData.tad || 0);
        const tadDeductions = (tad > 38400) ? 38400 : tad;

        const savingAcc = parseFloat(formData.saving_interest_deductions || 0);
        const savingInterestDeductions = (calculateAge(user.dob) > 60) 
            ? Math.min(savingAcc, 50000) 
            : Math.min(savingAcc, 10000);

        const eightyD = parseFloat(formData.medical || 0);
        const eightyDDeductions = (calculateAge(user.dob) > 60) 
            ? Math.min(eightyD, 50000) 
            : Math.min(eightyD, 30000);

        const medicalDisability = parseFloat(formData.medicaldisability || 0);
        const medicalDisabilityPercentage = parseFloat(formData.medicaldisability_percentage || 0);
        const eightyDDDeductions = (medicalDisabilityPercentage > 39 && medicalDisabilityPercentage < 80)
            ? Math.min(medicalDisability, 75000)
            : (medicalDisabilityPercentage > 79) 
                ? Math.min(medicalDisability, 125000) 
                : 0;

        const specialDiseases = parseFloat(formData.specialdiseases || 0);
        const eightyDDBDeductions = (calculateAge(user.dob) > 60)
            ? Math.min(specialDiseases, 100000)
            : Math.min(specialDiseases, 40000);

        const homeLoan = parseFloat(formData.homeloan || 0);
        const homeLoanDeductions = Math.min(homeLoan, 50000);

        const firstHome = parseFloat(formData.firsthome || 0);
        const firstHomeDeductions = Math.min(firstHome, 150000);

        const ev = parseFloat(formData.ev || 0);
        const evDeductions = Math.min(ev, 150000);

        <!--------------------------------------------------------->

        const businessDeductions = (businessIncome === 0) ? 0 : 
            parseFloat(formData.depreciation_assets || 0)+
            parseFloat(formData.expenditure_scientific_research || 0) +
            parseFloat(formData.deduction_new_employment || 0) * 30 +
            parseFloat(formData.donations_charitable_institutions || 0) +
            parseFloat(formData.infrastructure_development || 0) +
            parseFloat(formData.specific_business_expenditures || 0) +
            parseFloat(formData.general_business_expenditures || 0);

        const additionalDeduction = hra === 0 ? parseFloat(formData.houserent || 0) : 0;
        const totalIncome = salary + businessIncome + rentalIncome + otherIncome + savingInterest + capitalGains;

        const deductions = totalIncome ===0 ? 0 : hraDeduction +
            parseFloat(formData.lta || 0) +
            ceaDeductions +
            taDeductions +
            tadDeductions +
            savingInterestDeductions +
            parseFloat(formData.professional_allowance || 0) +
            parseFloat(formData.uniform_allowance || 0) +
            eightyCDeductions +
            eightyDDeductions +
            eightyDDDeductions +
            eightyDDBDeductions +
            parseFloat(formData.eduloan || 0) +
            homeLoanDeductions +
            firstHomeDeductions +
            evDeductions +
            parseFloat(formData.donations || 0) +
            additionalDeduction +
            parseFloat(formData.donations_scientific_rural_development || 0) +
            parseFloat(formData.donations_individuals_political_parties || 0) +
            businessDeductions + 50000;

        const deductionsNew =totalIncome ===0 ? 0 : parseFloat(formData.NPS || 0) + parseFloat(formData.tad || 0) + 75000;

        
        const taxableIncomeOld = totalIncome - deductions;
        const taxableIncomeNew = totalIncome - deductionsNew ;
        %>
                

<p class="mt-2 text-gray-700">
    Income: ₹<%= totalIncome.toFixed(2) %>
</p>
<p class="mt-1 text-gray-700">
    Deductions: ₹<%= deductions.toFixed(2) %>
</p>
<p class="mt-1 text-gray-700">
    Taxable income: ₹<%= taxableIncomeOld.toFixed(2) %>
</p>
<%
    const age = calculateAge(user.dob);
    let maritalstatusx = user.marrtialstatus;
    let taxPayable = 0;

    if (age < 60) {
        if (taxableIncomeOld <= 250000) {
            taxPayable = 0;
        } else if (taxableIncomeOld <= 500000) {
            taxPayable = 0;
        } else if (taxableIncomeOld <= 1000000) {
            taxPayable = (500000 - 250000) * 0.05 + (taxableIncomeOld - 500000) * 0.20;
        } else {
            taxPayable = (500000 - 250000) * 0.05 + (1000000 - 500000) * 0.20 + (taxableIncomeOld - 1000000) * 0.30;
        }
    } else if (age < 80) {
        if (taxableIncomeOld <= 300000) {
            taxPayable = 0;
        } else if (taxableIncomeOld <= 500000) {
            taxPayable = 0;
        } else if (taxableIncomeOld <= 1000000) {
            taxPayable = (500000 - 300000) * 0.05 + (taxableIncomeOld - 500000) * 0.20;
        } else {
            taxPayable = (500000 - 300000) * 0.05 + (1000000 - 500000) * 0.20 + (taxableIncomeOld - 1000000) * 0.30;
        }
    } else {
        if (taxableIncomeOld <= 500000) {
            taxPayable = 0;
        } else if (taxableIncomeOld <= 1000000) {
            taxPayable = (taxableIncomeOld - 500000) * 0.20;
        } else {
            taxPayable = (1000000 - 500000) * 0.20 + (taxableIncomeOld - 1000000) * 0.30;
        }
    }
%>

<p class="mt-1 text-gray-700">
    Tax Payable: ₹<%= taxPayable.toFixed(2) %>
</p>


                </div>
                <div class="bg-gray-50 p-4 rounded-md shadow-md">
                    <h3 class="text-lg font-bold text-gray-600">New Tax Regime</h3>
                    <p class="mt-2 text-gray-700">
                        Income: ₹<%= totalIncome.toFixed(2) %>
                    </p>
                    <p class="mt-1 text-gray-700">Deductions:₹<%=deductionsNew %></p>
                    <p class="mt-1 text-gray-700">
                        Taxable Income: ₹<%= taxableIncomeNew.toFixed(2) %>
                    </p>
                    <%
                    let taxPayablenew = 0;
                
                    // Tax Calculation based on tax slabs
                    if (taxableIncomeNew <= 300000) {
                        taxPayablenew = 0;
                    } else if (taxableIncomeNew <= 700000) {
                        taxPayablenew = 0;
                    } else if (taxableIncomeNew <= 1000000) {
                        taxPayablenew = (700000 - 300000) * 0.05 + (taxableIncomeNew - 700000) * 0.10;
                    } else if (taxableIncomeNew <= 1200000) {
                        taxPayablenew = (700000 - 300000) * 0.05 + (1000000 - 700000) * 0.10 + (taxableIncomeNew - 1000000) * 0.15;
                    } else if (taxableIncomeNew <= 1500000) {
                        taxPayablenew = (700000 - 300000) * 0.05 + (1000000 - 700000) * 0.10 + (1200000 - 1000000) * 0.15 + (taxableIncomeNew - 1200000) * 0.20;
                    } else {
                        taxPayablenew = (700000 - 300000) * 0.05 + (1000000 - 700000) * 0.10 + (1200000 - 1000000) * 0.15 + (1500000 - 1200000) * 0.20 + (taxableIncomeNew - 1500000) * 0.30;
                    }
                %>
                
                    <p class="mt-1 text-gray-700">Tax Payable: ₹<%= taxPayablenew %></p>
                </div>
            </div>
            
            <%
            let taxsaved = 0;
             if(taxPayablenew > taxPayable){
                let taxwithoutdeductions = 0;
                if (age < 60) {
                    if (totalIncome <= 250000) {
                        taxwithoutdeductions = 0;
                    } else if (totalIncome <= 500000) {
                        taxwithoutdeductions = 0;
                    } else if (totalIncome <= 1000000) {
                        taxwithoutdeductions = (500000 - 250000) * 0.05 + (totalIncome - 500000) * 0.20;
                    } else {
                        taxwithoutdeductions = (500000 - 250000) * 0.05 + (1000000 - 500000) * 0.20 + (totalIncome - 1000000) * 0.30;
                    }
                } else if (age < 80) {
                    if (totalIncome <= 300000) {
                        taxwithoutdeductions = 0;
                    } else if (totalIncome <= 500000) {
                        taxwithoutdeductions = 0;
                    } else if (totalIncome <= 1000000) {
                        taxwithoutdeductions = (500000 - 300000) * 0.05 + (totalIncome - 500000) * 0.20;
                    } else {
                        taxwithoutdeductions = (500000 - 300000) * 0.05 + (1000000 - 500000) * 0.20 + (totalIncome - 1000000) * 0.30;
                    }
                } else {
                    if (totalIncome <= 500000) {
                        taxwithoutdeductions = 0;
                    } else if (totalIncome <= 1000000) {
                        taxwithoutdeductions = (totalIncome - 500000) * 0.20;
                    } else {
                        taxwithoutdeductions = (1000000 - 500000) * 0.20 + (totalIncome - 1000000) * 0.30;
                    }
                }

             taxsaved = taxwithoutdeductions - taxPayable;
             }else if(taxPayablenew < taxPayable){
                let taxwithoutdeductions = 0;
                if (totalIncome <= 300000) {
                    taxwithoutdeductions = 0;
                } else if (totalIncome <= 700000) {
                    taxwithoutdeductions = 0;
                } else if (totalIncome <= 1000000) {
                    taxwithoutdeductions = (700000 - 300000) * 0.05 + (totalIncome - 700000) * 0.10;
                } else if (totalIncome <= 1200000) {
                    taxwithoutdeductions = (700000 - 300000) * 0.05 + (1000000 - 700000) * 0.10 + (totalIncome - 1000000) * 0.15;
                } else if (totalIncome <= 1500000) {
                    taxwithoutdeductions = (700000 - 300000) * 0.05 + (1000000 - 700000) * 0.10 + (1200000 - 1000000) * 0.15 + (totalIncome - 1200000) * 0.20;
                } else {
                    taxwithoutdeductions = (700000 - 300000) * 0.05 + (1000000 - 700000) * 0.10 + (1200000 - 1000000) * 0.15 + (1500000 - 1200000) * 0.20 + (totalIncome - 1500000) * 0.30;
                }
                taxsaved = taxwithoutdeductions - taxPayablenew;

             }
            %>
            <div class="mt-6 p-4 bg-green-100 border-l-4 border-green-500 text-green-700">
                <p class="font-semibold">Tax Saved in less taxPayable Regime Because of deductions : ₹<%= taxsaved.toFixed(2) %> </p>
            </div>
            <label for="suggestions" class="suggestions">
                See Suggestions
                <!-- <a  href="/suggestions" class="font-semibold hover:text-green-500">See Suggestions</a> -->
            </label>
            <!-- <input type="checkbox" id="suggestions"> -->

           <div class="sugg">
            <!-- <div class="hide">
                <ul>
                    Focus: Wealth creation, tax savings, and minimal lock-in periods.
                    <li>1. Equity Linked Savings Scheme (ELSS): High returns, 3-year lock-in.</li>
                    <li>2. National Pension Scheme (NPS): Long-term retirement savings, additional ₹50,000
                        deduction under 80CCD(1B).</li>
                    <li>3. Public Provident Fund (PPF): EEE benefit, secure, long-term savings.</li>
                    <li>4. Unit Linked Insurance Plans (ULIPs): Investment + insurance, moderate returns.</li>
                    <li>5. Employee Provident Fund (EPF): If applicable.</li>
                    <li>6. Home Loan Principal Repayment: If you’ve recently purchased property.</li>
                    <li>7. Life Insurance Premiums: Choose term plans for affordable coverage.</li>
                    <li>8. National Savings Certificate (NSC): Secure, 5-year lock-in.</li>
                    <li>9. Tax-Saving Fixed Deposits (FDs): 5-year lock-in, safe but taxable interest.</li>
                    <li>10. Sukanya Samriddhi Yojana (SSY): If you have a daughter (long-term).</li>
                    
                </ul>
            </div> -->
            <div class="hide">
                <h1 class="text-green-800">*Suggetions According to Your Age(<%=calculateAge(user.dob)%>) </h1>
                <%   if (age < 25) { %>
                        
                        <p>Focus: Wealth creation, tax savings, and minimal lock-in periods.</p>
                        <ul>
                            <% if (parseFloat(formData.elss || 0) === 0) { %>
                                <li>Equity Linked Savings Scheme (ELSS): High returns, 3-year lock-in.</li>
                            <% } %>
                            <% if (parseFloat(formData.NPS || 0) === 0) { %>
                                <li>National Pension Scheme (NPS): Long-term retirement savings, additional ₹50,000 deduction under 80CCD(1B).</li>
                            <% } %>
                            <% if (parseFloat(formData.ppf || 0) === 0) { %>
                                <li>Public Provident Fund (PPF): EEE benefit, secure, long-term savings.</li>
                            <% } %>
                            <% if (parseFloat(formData.ulips || 0) === 0) { %>
                                <li>Unit Linked Insurance Plans (ULIPs): Investment + insurance, moderate returns.</li>
                            <% } %>
                            <% if (parseFloat(formData.epf || 0) === 0) { %>
                                <li>Employee Provident Fund (EPF): If applicable.</li>
                            <% } %>

                            <li>Home Loan Principal Repayment: If you've recently purchased property.</li>

                            <li>Life Insurance Premiums: Choose term plans for affordable coverage.</li>

                            <li>National Savings Certificate (NSC): Secure, 5-year lock-in.</li>

                            <li>Tax-Saving Fixed Deposits (FDs): 5-year lock-in, safe but taxable interest.</li>

                            <li>Sukanya Samriddhi Yojana (SSY): If you have a daughter (long-term).</li>

                            <li>Tuition Fees: For higher education (if applicable).</li>
                        </ul>
                <% } else if (age > 25 && maritalstatusx === "Unmarried") { %>
                        <p>Focus: Retirement, dependents' financial security, and tax savings.</p>
                        <ul>
                            <li>Employee Provident Fund (EPF): Automatically deducted, secure retirement savings.</li>
                            <li>Public Provident Fund (PPF): Secure, tax-free, long-term.</li>
                            <li>National Pension Scheme (NPS): For retirement savings, additional deductions under 80CCD(1B).</li>
                            <li>Life Insurance Premiums: Prioritize term plans.</li>
                            <li>Sukanya Samriddhi Yojana (SSY): If you have a daughter.</li>
                            <li>Home Loan Principal Repayment: Asset creation with tax benefits.</li>
                            <li>National Savings Certificate (NSC): Secure, fixed returns.</li>
                            <li>Equity Linked Savings Scheme (ELSS): For moderate risk takers.</li>
                            <li>Tax-Saving Fixed Deposits (FDs): For ultra-conservative savers.</li>
                            <li>Unit Linked Insurance Plans (ULIPs): If combining investment and insurance.</li>
                            <li>Tuition Fees: Applicable if you have children in school/college.</li>
                        </ul>
                <% } else if (age > 25 && maritalstatusx === "Married" && user.children > 0) { %>
                        <p>Focus: Children's education, marriage, and tax savings.</p>
                        <ul>
                            <li>Sukanya Samriddhi Yojana (SSY): Highest priority if you have a daughter.</li>
                            <li>Tuition Fees: Direct benefit for up to 2 children.</li>
                            <li>Life Insurance Premiums: For family security (opt for term plans).</li>
                            <li>Public Provident Fund (PPF): Secure savings for long-term goals.</li>
                            <li>Home Loan Principal Repayment: If you've invested in property.</li>
                            <li>Employee Provident Fund (EPF): For salaried individuals.</li>
                            <li>National Pension Scheme (NPS): For retirement planning.</li>
                            <li>National Savings Certificate (NSC): Fixed returns with a 5-year lock-in.</li>
                        </ul>
                <% } else if (age > 60) { %>
                        <p>Focus: Regular income, tax savings, and safe investments.</p>
                        <ul>
                            <li>Senior Citizens Savings Scheme (SCSS): Best option for retirees (high interest, regular income).</li>
                            <li>Public Provident Fund (PPF): Tax-free, long-term savings.</li>
                            <li>National Savings Certificate (NSC): Secure, fixed returns.</li>
                            <li>Tax-Saving Fixed Deposits (FDs): Short-term and secure.</li>
                            <li>Life Insurance Premiums: If still maintaining a policy.</li>
                            <li>Employee Provident Fund (EPF): If still contributing.</li>
                            <li>Home Loan Principal Repayment: If you have an active loan.</li>
                            <li>Sukanya Samriddhi Yojana (SSY): For retired parents of daughters below 10 years.</li>
                            <li>Unit Linked Insurance Plans (ULIPs): Rarely needed at this stage.</li>
                            <li>National Pension Scheme (NPS): If partial corpus withdrawal is pending.</li>
                            <li>Equity Linked Savings Scheme (ELSS): Low priority due to market risks.</li>
                        </ul>
                <% } %>
            </div>
         </div>
            
            <div class="mt-8 text-center">
                <a href="/tool" class="text-blue-600 hover:underline">Go Back to Tool</a>
            </div>
        </div>
    </div>
    <script src="/result.js"></script>
</body>
</html> 